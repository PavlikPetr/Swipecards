def versionProps = new Properties()

def versionPropsFile = file('version.properties')
if (!versionPropsFile.canRead()) {
    throw new GradleException("Could not read version.properties! Create file in project root")
}
versionProps.load(new FileInputStream(versionPropsFile))
incrementQaBuildVersion(versionProps, versionPropsFile);

def getVersionCode(versionProps) {
    def versionCode = versionProps['VERSION_CODE'].toInteger()
    def taskNames = project.gradle.startParameter.taskNames
    if (taskNames.contains("assembleGoogleQa") || taskNames.contains("assembleIfreeQa")) {
        versionCode = versionCode + getQaVersion(versionProps)
    }
    return versionCode;
}

def getVersionName(versionProps) {
    def versionName = versionProps['VERSION_NAME']
    return versionName;
}

def getQaVersion(versionProps) {
    def versionQaBuild = versionProps['VERSION_QA_BUILD'].toInteger()
    return versionQaBuild;
}

def incrementQaBuildVersion(versionProps, versionPropsFile) {
    def taskNames = project.gradle.startParameter.taskNames
    if ((taskNames.contains("assembleGoogleQa") || taskNames.contains("assembleIfreeQa")) && versionProps != null) {
        def versionQaBuild = versionProps['VERSION_QA_BUILD'].toInteger() + 1
        versionProps['VERSION_QA_BUILD'] = versionQaBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }
}

def getGitHeadSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim();
}

def getTimestamp() {
    return new Date().getTime();
}

buildscript {
    ext {
        retrofit_version = '2.1.0'
        ampiri = '3.9.0'
        google_play_services_version = '9.4.0'
        kotlin_version = '1.1.2'
        anko_version = '0.9'
        permissionsdispatcher_version = '2.2.0'
        flurry_version = '6.6.0'
        dagger = '2.8'
        leakcanary = '1.4'
        hockeyAppReleaseAppId = '817b00ae731c4a663272b4c4e53e4b61'
        hockeyAppQaAppId = '9bf289e229284c0cba8d47eba5da9618'
    }
    repositories {
        jcenter()
        mavenCentral()
        //костыль. как тольок будет выложена новыя версия плагина это можно убрать
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath rootProject.ANDROID_BUILD_GRADLE_PLUGIN_VERSION
        classpath 'com.google.gms:google-services:3.0.0'
        /*----------- Плагин groovy для получения нормальных ошибок при сборке и генерации -----------*/
//        classpath 'org.codehaus.groovy:groovy-android-gradle-plugin:1.1.0'
        /*------------------------------------------- END -------------------------------------------*/
    }
}

allprojects {
    repositories {
        maven { url "https://dl.bintray.com/ironsource-mobile/android-sdk" }
        maven { url 'https://raw.githubusercontent.com/onepf/OPF-mvn-repo/master/' }
        maven { url 'https://bitbucket.org/atm13/artifacts/raw/master/' }
        maven { url "https://dl.bintray.com/topface/libs" }
        maven {
            name "Fyber's maven repo"
            url "https://fyber.bintray.com/maven"
        }
        maven {
            url "https://dl.bintray.com/supersonic/android-sdk"
        }
        jcenter()
        flatDir {
            dirs 'libs'
        }
        maven { url "https://jitpack.io" }
        maven { url "http://ampiri.bintray.com/maven" }
    }

    // Allow 400 errors.
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "400"
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
/*----------- Плагин groovy для получения нормальных ошибок при сборке и генерации -----------*/
//apply plugin: 'groovyx.android'
/*------------------------------------------- END -------------------------------------------*/

android {
    compileSdkVersion Integer.parseInt(rootProject.ANDROID_BUILD_MAX_SDK_VERSION)
    buildToolsVersion rootProject.ANDROID_BUILD_TOOLS_VERSION

    dataBinding {
        enabled = true
    }

    productFlavors {
        //Основной flavor, в нашем случае работает с Google Play
        google {
            buildConfigField "String", "STATISTICS_APP", "\"topfacemobappandroid\"";
        }
        //flavor для версии приложения для Amazon
        amazon {
            buildConfigField "com.topface.billing.MarketApiType", "MarketApiType", "com.topface.billing.MarketApiType.AMAZON";
            buildConfigField "String", "STATISTICS_APP", "\"topfacemobappamazon\"";
        }
        //flavor для версии приложения для Nokia X
        //Пока не используется, поэтому закоментирован
        /*nokia {
            buildConfigField "com.topface.billing.MarketApiType", "MARKET_API_TYPE",
                    "com.topface.billing.MarketApiType.NOKIA_STORE";
            buildConfigField "String", "STATISTICS_APP", "\"topfacemobappandroidnokia\"";
        }*/
        blueStacks {
            applicationId "com.topface.spark.bst"
            buildConfigField "String", "STATISTICS_APP", "\"topfacemobappbluestack\"";
            buildConfigField "com.topface.billing.MarketApiType", "MarketApiType", "com.topface.billing.MarketApiType.BLUE_STACKS";
            buildConfigField "com.topface.billing.MarketApiType", "MARKET_API_TYPE",
                    "com.topface.billing.MarketApiType.BLUE_STACKS";
        }
        ok {
            applicationId "com.topface.topface.ok"
            buildConfigField "String", "STATISTICS_APP", "\"topfacemobappandroidok\"";
            buildConfigField "com.topface.billing.MarketApiType", "MarketApiType", "com.topface.billing.MarketApiType.OK";
            buildConfigField "com.topface.billing.MarketApiType", "MARKET_API_TYPE",
                    "com.topface.billing.MarketApiType.OK";
            manifestPlaceholders = [applicationClass: "com.topface.topface.ui.OkApplication"]
        }
        ifree {
            applicationId "com.topface.topface.ifree"
            buildConfigField "com.topface.billing.MarketApiType", "MarketApiType", "com.topface.billing.MarketApiType.I_FREE";
            buildConfigField "String", "STATISTICS_APP", "\"topfacemobappifree\"";
            buildConfigField "com.topface.billing.MarketApiType", "MARKET_API_TYPE",
                    "com.topface.billing.MarketApiType.I_FREE";
        }
        derived {
            applicationId "com.topface.topface.derived"
            buildConfigField "com.topface.billing.MarketApiType", "MarketApiType", "com.topface.billing.MarketApiType.DERIVED";
            buildConfigField "String", "STATISTICS_APP", "\"topfacemobappderived\"";
            buildConfigField "com.topface.billing.MarketApiType", "MARKET_API_TYPE",
                    "com.topface.billing.MarketApiType.DERIVED";
        }
        appland {
            applicationId "com.topface.topface.appland"
            buildConfigField "com.topface.billing.MarketApiType", "MarketApiType", "com.topface.billing.MarketApiType.APPLAND";
            buildConfigField "String", "STATISTICS_APP", "\"topfacemobappappland\"";
            buildConfigField "com.topface.billing.MarketApiType", "MARKET_API_TYPE",
                    "com.topface.billing.MarketApiType.APPLAND";
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        applicationId "com.topface.topface"
        //noinspection GroovyAssignabilityCheck
        minSdkVersion Integer.parseInt(rootProject.ANDROID_BUILD_MIN_SDK_VERSION)
        //noinspection GroovyAssignabilityCheck
        targetSdkVersion Integer.parseInt(rootProject.ANDROID_BUILD_MAX_SDK_VERSION)

        versionCode getVersionCode(versionProps)
        versionName getVersionName(versionProps)

        testApplicationId "com.topface.topface.test"

        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"

        buildConfigField "long", "BUILD_TIME", "0L";
        buildConfigField "String", "GIT_HEAD_SHA", "null";
        buildConfigField "com.topface.billing.MarketApiType", "MARKET_API_TYPE",
                "com.topface.billing.MarketApiType.GOOGLE_PLAY";
        manifestPlaceholders = [applicationClass: "com.topface.topface.App",
                                HOCKEYAPP_APP_ID: "$hockeyAppQaAppId"];

        multiDexEnabled true
    }

    signingConfigs {
        google {
            storeFile file("misc/keys/topface.keystore")
            storePassword "Sonetica2012"
            keyAlias "topface"
            keyPassword "Sonetica2012"
        }
        ifree {
            storeFile file("misc/keys/topfaceIFree.keystore")
            storePassword "Sonetica2012"
            keyAlias "topfaceifree"
            keyPassword "Sonetica2012"
        }
        ok {
            storeFile file("misc/keys/topfaceOK.jks")
            storePassword "Sonetica2012"
            keyAlias "topfaceok"
            keyPassword "Sonetica2012"
        }
        blueStacks {
            storeFile file("misc/keys/topfaceBlueStacks.keystore")
            storePassword "Sonetica2012"
            keyAlias "topfacebluestacks"
            keyPassword "Sonetica2012"
        }
        derived {
            storeFile file("misc/keys/topfaceDerived.jks")
            storePassword "Sonetica2012"
            keyAlias "topfacederived"
            keyPassword "Sonetica2012"
        }
        appland {
            storeFile file("misc/keys/topfaceAppLand.keystore")
            storePassword "Sonetica2012"
            keyAlias "topfaceappland"
            keyPassword "Sonetica2012"
        }
        debug {
            storeFile file("misc/keys/debug.keystore")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-config.txt',
                    'proguard-ampiri.txt',
                    'proguard-appodeal.txt'
        }
        release {
            minifyEnabled true
            productFlavors.google.signingConfig signingConfigs.google
            productFlavors.ifree.signingConfig signingConfigs.ifree
            productFlavors.ok.signingConfig signingConfigs.ok
            productFlavors.blueStacks.signingConfig signingConfigs.blueStacks
            productFlavors.derived.signingConfig signingConfigs.derived
            productFlavors.appland.signingConfig signingConfigs.appland
            productFlavors.amazon.signingConfig signingConfigs.google
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-config.txt'
            shrinkResources false
            manifestPlaceholders = [HOCKEYAPP_APP_ID: "$hockeyAppReleaseAppId"]
        }
        //Специальный тип сборки для тестирования отделом QA,
        //пишем время сборки и SHA текущего комита, это нужно для идентификации сборки
        qa.initWith(buildTypes.debug)
        qa {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-config.txt'
            versionNameSuffix ".${getQaVersion(versionProps)}-qa"
            buildConfigField "long", "BUILD_TIME", "${getTimestamp()}L";
            buildConfigField "String", "GIT_HEAD_SHA", "\"${getGitHeadSha()}\"";
        }
    }

    //@see https://code.google.com/p/android/issues/detail?id=61573#c14
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/rxjava.properties'
        exclude 'LICENSE.txt'
    }

    dexOptions {
        //@see https://code.google.com/p/android/issues/detail?id=40409
        jumboMode true
        javaMaxHeapSize "4g"
    }

    lintOptions {
        checkReleaseBuilds true
        //Отключено, что бы не валилась сборка на CI сервере
        abortOnError false
        //Для ButterKnife. Смотри http://jakewharton.github.io/butterknife/ раздел подключения
        disable 'InvalidPackage'
        //Отключаем ненужные нам проверки lint
        ignore "MissingTranslation", //Об отсутсвующих переводах. У нас есть всегда языки без переводов
                "ContentDescription", //О том что к каждой картинке нужно описание
                "SmallSp", //Проверка на маленький размер шрифта. Это вотчина дизайнеров
                "HandlerLeak", //Предупреждение об использовании анонимного Handler
                "InflateParams", //Проверка того, что  передан view root при inflate. Отключен, т.к. все предупреждения касаются inflate в ListView, где нет root view
                "UnusedQuantity", //Предупреждение о не используемой форме в переводах. Мы используем zero во всех языках, поэтому нам не актуально
                "ClickableViewAccessibility", //Предупреждение о том, что нужно определить performClick, если переопределяешь onTouchEvent
                "MissingQuantity" //Временно отключена проверка из-за того,
        //что нет many формы в польском и украинском в дальнейшем поправим
        //(пока many = other)
    }
}

/*----------- Плагин groovy для получения нормальных ошибок при сборке и генерации -----------*/
//androidGroovy {
//    options {
//        configure(groovyOptions) {
//            encoding = 'UTF-8'
//            forkOptions.jvmArgs = ['-noverify'] // maybe necessary if you use Google Play Services
//            javaAnnotationProcessing = true
//        }
//        skipJavaC = true
//    }
//}
/*------------------------------------------- END -------------------------------------------*/

dependencies {
    /*----------- Плагин groovy для получения нормальных ошибок при сборке и генерации -----------*/
    // https://github.com/groovy/groovy-android-gradle-plugin
//    compile "org.codehaus.groovy:groovy:2.4.10:grooid"
    /*------------------------------------------- END -------------------------------------------*/
    //Kotlin
    compile "org.jetbrains.anko:anko-sdk15:$anko_version"
    compile("org.jetbrains.anko:anko-support-v4:$anko_version") {
        exclude module: 'anko-common'
    }
    compile("org.jetbrains.anko:anko-appcompat-v7:$anko_version") {
        exclude module: 'anko-common'
        exclude module: 'anko-support-v4'
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    kapt 'com.android.databinding:compiler:2.3.1'
    //Android Support libs
    compile(rootProject.ANDROID_BUILD_SUPPORT_LIBRARY_VERSION) {
        exclude group: 'com.android.support'
    }
    compile(rootProject.ANDROID_BUILD_SUPPORT_APPCOMPAT_VERSION) {
        exclude module: 'support-v4'
    }
    compile(rootProject.ANDROID_BUILD_DESIGN_SUPPORT_VERSION) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
    }
    // used only for support translucent status bar on china devices
    compile 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    //Google play services
    compile "com.google.android.gms:play-services-gcm:$google_play_services_version"
    compile("com.google.android.gms:play-services-location:$google_play_services_version") {
        exclude module: 'play-services-base'
        exclude module: 'play-services-basement'
    }
    compile("com.google.android.gms:play-services-ads:$google_play_services_version") {
        exclude module: 'play-services-base'
        exclude module: 'play-services-basement'
    }
    compile("com.google.android.gms:play-services-analytics:$google_play_services_version") {
        exclude module: 'play-services-base'
        exclude module: 'play-services-basement'
    }
    //Multi dex support
    compile 'com.android.support:multidex:1.0.1'
    //All jar libs
    compile fileTree(dir: 'libs', exclude: 'amazon/*.jar', include: '*.jar')
    //Testing
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:2.0.5-beta"
    testCompile('org.robolectric:robolectric:2.4') {
        exclude group: 'com.android.support'
    }
    // flurry analytics
    compile "com.flurry.android:analytics:$flurry_version"
    compile "com.flurry.android:ads:$flurry_version"
    compile project(':libs:PullToRefresh')
    compile project(':libs:Swipecards')

    compile(project(':libs:tf-offerwall:sdk')) {
        exclude group: 'com.android.support'
        exclude group: 'com.google.android.gms'
    }
    compile(project(':libs:odnoklassniki')) {
        exclude group: 'com.android.support'
    }
    compile(project(':libs:scruffy-android:scruffy')) {
        exclude group: 'com.android.support'
    }
    compile 'com.nostra13.universalimageloader:library:1.9.5@aar'
    compile(rootProject.ANDROID_BUILD_SUPPORT_CARDVIEW_VERSION) {
        exclude group: 'com.android.support'
    }
    compile(rootProject.ANDROID_BUILD_SUPPORT_PERCENT_VERSION) {
        exclude group: 'com.android.support'
    }

    compile 'com.google.code.gson:gson:2.7'
    //Library for WebSocket and other network requests
    compile 'com.koushikdutta.async:androidasync:2.1.7'
    //OpenIAB
    compile('org.onepf:openiab:0.9.8.4') {
        exclude group: 'com.intellij'
    }
    //View Bind
    compile('com.jakewharton:butterknife:8.2.1') {
        exclude module: 'support-annotations'
    }
    provided 'com.jakewharton:butterknife-compiler:8.2.1'
    kapt 'com.jakewharton:butterknife-compiler:8.2.1'

    compile('com.github.chrisbanes:PhotoView:1.3.0') {
        exclude group: 'com.android.support'
    }
    //Для Амазона нужна библиотека для поддержки in-app покупок
    amazonCompile 'com.amazon:in-app-purchasing:2.0.1'
    //RxJava
    compile 'io.reactivex:rxjava:1.2.5'
    compile('io.reactivex:rxandroid:1.2.1') {
        exclude module: 'rxjava'
    }
    compile('io.reactivex:rxkotlin:0.60.0') {
        exclude module: 'kotlin-stdlib'
        exclude module: 'rxjava'
    }

    compile "com.google.dagger:dagger:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    // provided 'org.glassfish:javax.annotation:10.0-b28'

    //Social networks SDK
    compile('com.vk:androidsdk:1.6.8') {
        exclude group: 'com.android.support'
    }
    compile('com.facebook.android:facebook-android-sdk:4.5.0') {
        exclude group: 'com.android.support'
    }
    // для appodeal
    compile 'com.facebook.android:audience-network-sdk:4.12.1'
    //Expandet FAB
    compile('net.i2p.android.ext:floatingactionbutton:1.10.1') {
        exclude module: 'support-annotations'
    }
    //Animations: NineOldAndroids, ListViewAnimations
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    //LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakcanary"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary"
    qaCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary"


    ifreeCompile('com.ifree.monetize:monetization-library:2.2.5') {
        exclude group: "com.fasterxml.jackson.core"
        exclude module: "support-v4"
    }
    ifreeCompile(
            [group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.3.3'],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.3.3'],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.3.3']
    )
    ifreeCompile fileTree(dir: 'ifree/libs', include: '*.jar')

    // Retrofit
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile("com.squareup.retrofit2:converter-gson:$retrofit_version") {
        exclude group: 'com.squareup.retrofit2'
        exclude group: 'com.google.code.gson'
    }
    compile("com.squareup.retrofit2:adapter-rxjava:$retrofit_version") {
        exclude group: 'com.squareup.retrofit2'
        exclude group: 'io.reactivex'
    }
    /*________________________GLIDE__________________________________*/
    compile 'com.github.bumptech.glide:glide:3.7.0'
    //норм либка с  трансформациями для glide, работает шустро
    compile 'jp.wasabeef:glide-transformations:2.0.1'
    //лоадер для glide
    compile 'com.github.bumptech.glide:okhttp-integration:1.4.0@aar'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    /*_______________________________________________________________*/
    /*________________________AMPIRI_________________________________*/
    compile("com.ampiri.sdk:ampiri-sdk:$ampiri") {
        exclude group: 'com.google.android.gms'
        exclude group: 'javax.inject'
    }
    compile("com.ampiri.sdk:ampiri-sdk-mediation-adcolony:$ampiri") {
        exclude group: 'com.google.android.gms'
        exclude group: 'javax.inject'
    }
    compile("com.ampiri.sdk:ampiri-sdk-mediation-admob:$ampiri") {
        exclude group: 'com.google.android.gms'
        exclude group: 'javax.inject'
    }
//    Временно отключаю до решения конфликта с версией unity_ads в appodeal
//    compile("com.ampiri.sdk:ampiri-sdk-mediation-unityads:$ampiri") {
//        exclude group: 'com.google.android.gms'
//        exclude group: 'javax.inject'
//    }
    compile("com.ampiri.sdk:ampiri-sdk-mediation-applovin:$ampiri") {
        exclude group: 'com.google.android.gms'
        exclude group: 'javax.inject'
    }
    compile("com.ampiri.sdk:ampiri-sdk-mediation-chartboost:$ampiri") {
        exclude group: 'com.google.android.gms'
        exclude group: 'javax.inject'
    }
    compile("com.ampiri.sdk:ampiri-sdk-mediation-facebook:$ampiri") {
        exclude group: 'com.google.android.gms'
        exclude group: 'javax.inject'
    }
    compile("com.ampiri.sdk:ampiri-sdk-mediation-mopub:$ampiri") {
        exclude group: 'com.google.android.gms'
        exclude group: 'com.mopub'
        exclude group: 'javax.inject'
    }
    compile("com.ampiri.sdk:ampiri-sdk-mediation-nativex:$ampiri") {
        exclude group: 'com.google.android.gms'
        exclude group: 'javax.inject'
    }
    compile("com.ampiri.sdk:ampiri-sdk-mediation-baidu:$ampiri") {
        exclude group: 'com.google.android.gms'
        exclude group: 'javax.inject'
    }
    /*_______________________________________________________________*/

    // add hockeyApp sdk to the project
    compile 'net.hockeyapp.android:HockeySDK:4.1.1'

    compile("com.github.hotchemi:permissionsdispatcher:$permissionsdispatcher_version") {
        exclude module: "support-v4"
        exclude module: 'kotlin-stdlib'
        exclude module: 'javapoet'
    }
    provided("com.github.hotchemi:permissionsdispatcher-processor:$permissionsdispatcher_version") {
        exclude module: 'kotlin-stdlib'
        exclude module: 'javapoet'
    }
    kapt("com.github.hotchemi:permissionsdispatcher-processor:$permissionsdispatcher_version") {
        exclude module: 'kotlin-stdlib'
        exclude module: 'javapoet'
    }
    //наша статистика
    kapt files("libs/processor.jar")

    // ironsrc sdk
    compile 'com.ironsource.sdk:mediationsdk:6.6.1@jar'

    /*APPODEAL start*/
    compile 'com.squareup.picasso:picasso:2.5.2' //for Inmobi
    /*APPODEAL end*/
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta2'
    // Временно переходим на использование подмодуля
//    /*swipe-cards*/
//    compile 'com.lorentzos.swipecards:library:1.0.9'
}

task processorTask(type: Exec) {
    commandLine 'cp', 'libs/statistics-android/processor/build/libs/processor.jar', 'libs/'
}

processorTask.dependsOn(':libs:statistics-android:processor:build')
preBuild.dependsOn(processorTask)

project(':libs:Swipecards') {
    apply plugin: 'com.android.library'
    android.sourceSets.main {
        manifest.srcFile 'library/src/main/AndroidManifest.xml'
        java.srcDirs = ['library/src/main']
        res.srcDirs = ['library/src/main/res']
    }
}

project(':libs:PullToRefresh') {
    apply plugin: 'com.android.library'
    android.sourceSets.main {
        manifest.srcFile 'library/AndroidManifest.xml'
        java.srcDirs = ['library/src']
        res.srcDirs = ['library/res']
    }
}

project(':libs:scruffy-android') {
    apply plugin: 'com.android.library'
    android.sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['scruffy/src/main/java']
        res.srcDirs = ['scruffy/src/main/res']
    }
}

//Social networks
project(':libs:odnoklassniki') {
    apply plugin: 'com.android.library'
    android.sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src/main/java']
        res.srcDirs = ['src/main/res']
    }
}

//Стандартные настройки подпроектов
subprojects {
    //До лучших времен закоментировал эту строку, пока Idea отказывается делать такие штуки, как папка сборки вне пределов проекта
    //buildDir "../../build/projects/$project.name"
    android {
        compileSdkVersion Integer.parseInt(rootProject.ANDROID_BUILD_MAX_SDK_VERSION)
        buildToolsVersion rootProject.ANDROID_BUILD_TOOLS_VERSION

        lintOptions {
            ignore "MissingTranslation"
//Об отсутсвующих переводах. У нас есть всегда языки без переводов
        }
    }
}

// простите за этот кусок унылого ..., но пока не удалось запустить внешнюю таску из build.gradle, поэтому
// в данный момент придется довольствоваться этим вариантом синхронизации строк

task runScript(type: Exec) {
    def listFlavours = []
    android.productFlavors.each { flavor ->
        listFlavours << flavor.name
    }
    def listBuildTypes = []
    android.buildTypes.each { buildType ->
        listBuildTypes << buildType.name
    }
    commandLine 'groovy', projectDir.toString().concat('/src/main/groovy/MoveStrings.groovy'), listFlavours, listBuildTypes
}
defaultTasks 'runScript'